{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, Keys, Utils } from \"../../common\";\nimport { Icon, IconSize } from \"../icon/icon\";\nimport { Spinner } from \"../spinner/spinner\";\nvar AbstractButton = /** @class */function (_super) {\n  __extends(AbstractButton, _super);\n  function AbstractButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      isActive: false\n    };\n    // we're casting as `any` to get around a somewhat opaque safeInvoke error\n    // that \"Type argument candidate 'KeyboardEvent<T>' is not a valid type\n    // argument because it is not a supertype of candidate\n    // 'KeyboardEvent<HTMLElement>'.\"\n    _this.handleKeyDown = function (e) {\n      var _a, _b;\n      // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n      /* eslint-disable deprecation/deprecation */\n      if (Keys.isKeyboardClick(e.which)) {\n        e.preventDefault();\n        if (e.which !== _this.currentKeyDown) {\n          _this.setState({\n            isActive: true\n          });\n        }\n      }\n      _this.currentKeyDown = e.which;\n      (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleKeyUp = function (e) {\n      var _a, _b, _c;\n      // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n      /* eslint-disable deprecation/deprecation */\n      if (Keys.isKeyboardClick(e.which)) {\n        _this.setState({\n          isActive: false\n        });\n        (_a = _this.buttonRef) === null || _a === void 0 ? void 0 : _a.click();\n      }\n      _this.currentKeyDown = undefined;\n      (_c = (_b = _this.props).onKeyUp) === null || _c === void 0 ? void 0 : _c.call(_b, e);\n    };\n    _this.handleBlur = function (e) {\n      var _a, _b;\n      if (_this.state.isActive) {\n        _this.setState({\n          isActive: false\n        });\n      }\n      (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    return _this;\n  }\n  AbstractButton.prototype.getCommonButtonProps = function () {\n    var _a;\n    var _b = this.props,\n      _c = _b.active,\n      active = _c === void 0 ? false : _c,\n      alignText = _b.alignText,\n      fill = _b.fill,\n      large = _b.large,\n      _d = _b.loading,\n      loading = _d === void 0 ? false : _d,\n      outlined = _b.outlined,\n      minimal = _b.minimal,\n      small = _b.small,\n      tabIndex = _b.tabIndex;\n    var disabled = this.props.disabled || loading;\n    var className = classNames(Classes.BUTTON, (_a = {}, _a[Classes.ACTIVE] = !disabled && (active || this.state.isActive), _a[Classes.DISABLED] = disabled, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.LOADING] = loading, _a[Classes.MINIMAL] = minimal, _a[Classes.OUTLINED] = outlined, _a[Classes.SMALL] = small, _a), Classes.alignmentClass(alignText), Classes.intentClass(this.props.intent), this.props.className);\n    return {\n      className: className,\n      disabled: disabled,\n      onBlur: this.handleBlur,\n      onClick: disabled ? undefined : this.props.onClick,\n      onKeyDown: this.handleKeyDown,\n      onKeyUp: this.handleKeyUp,\n      tabIndex: disabled ? -1 : tabIndex\n    };\n  };\n  AbstractButton.prototype.renderChildren = function () {\n    var _a = this.props,\n      children = _a.children,\n      icon = _a.icon,\n      loading = _a.loading,\n      rightIcon = _a.rightIcon,\n      text = _a.text;\n    var maybeHasText = !Utils.isReactNodeEmpty(text) || !Utils.isReactNodeEmpty(children);\n    return [loading && React.createElement(Spinner, {\n      key: \"loading\",\n      className: Classes.BUTTON_SPINNER,\n      size: IconSize.LARGE\n    }),\n    // The icon is purely decorative if text is provided\n    React.createElement(Icon, {\n      key: \"leftIcon\",\n      icon: icon,\n      \"aria-hidden\": maybeHasText,\n      tabIndex: maybeHasText ? -1 : undefined\n    }), maybeHasText && React.createElement(\"span\", {\n      key: \"text\",\n      className: Classes.BUTTON_TEXT\n    }, text, children), React.createElement(Icon, {\n      key: \"rightIcon\",\n      icon: rightIcon\n    })];\n  };\n  return AbstractButton;\n}(AbstractPureComponent2);\nexport { AbstractButton };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","Keys","Utils","Icon","IconSize","Spinner","__extends","_this","isActive","e","isKeyboardClick","which","preventDefault","currentKeyDown","setState","props","onKeyDown","buttonRef","click","undefined","onKeyUp","state","onBlur","AbstractButton","_c","active","alignText","fill","large","_d","loading","outlined","minimal","small","tabIndex","disabled","className","BUTTON","_a","ACTIVE","DISABLED","FILL","LARGE","LOADING","MINIMAL","OUTLINED","SMALL","alignmentClass","intentClass","intent","handleBlur","onClick","handleKeyDown","handleKeyUp","children","icon","rightIcon","text","maybeHasText","isReactNodeEmpty","key","BUTTON_SPINNER","size","BUTTON_TEXT"],"sources":["/home/teramind/Documents/workspace/webguy/apps/ui/node_modules/@blueprintjs/core/src/components/button/abstractButton.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    ActionProps,\n    Alignment,\n    Classes,\n    IElementRefProps,\n    Keys,\n    MaybeElement,\n    Utils,\n} from \"../../common\";\nimport { Icon, IconName, IconSize } from \"../icon/icon\";\nimport { Spinner } from \"../spinner/spinner\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type ButtonProps<E extends HTMLButtonElement | HTMLAnchorElement = HTMLButtonElement> = IButtonProps<E>;\n/** @deprecated use ButtonProps */\nexport interface IButtonProps<E extends HTMLButtonElement | HTMLAnchorElement = HTMLButtonElement>\n    extends ActionProps,\n        // eslint-disable-next-line deprecation/deprecation\n        IElementRefProps<E> {\n    /**\n     * If set to `true`, the button will display in an active state.\n     * This is equivalent to setting `className={Classes.ACTIVE}`.\n     *\n     * @default false\n     */\n    active?: boolean;\n\n    /**\n     * Text alignment within button. By default, icons and text will be centered\n     * within the button. Passing `\"left\"` or `\"right\"` will align the button\n     * text to that side and push `icon` and `rightIcon` to either edge. Passing\n     * `\"center\"` will center the text and icons together.\n     *\n     * @default Alignment.CENTER\n     */\n    alignText?: Alignment;\n\n    /** Button contents. */\n    children?: React.ReactNode;\n\n    /** Whether this button should expand to fill its container. */\n    fill?: boolean;\n\n    /** Whether this button should use large styles. */\n    large?: boolean;\n\n    /**\n     * If set to `true`, the button will display a centered loading spinner instead of its contents\n     * and the button will be disabled (_even if_ `disabled={false}`). The width of the button is\n     * not affected by the value of this prop.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /** Whether this button should use minimal styles. */\n    minimal?: boolean;\n\n    /** Whether this button should use outlined styles. */\n    outlined?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render after the text. */\n    rightIcon?: IconName | MaybeElement;\n\n    /** Whether this button should use small styles. */\n    small?: boolean;\n\n    /**\n     * HTML `type` attribute of button. Accepted values are `\"button\"`, `\"submit\"`, and `\"reset\"`.\n     * Note that this prop has no effect on `AnchorButton`; it only affects `Button`.\n     *\n     * @default \"button\"\n     */\n    type?: \"submit\" | \"reset\" | \"button\";\n}\n\n/** @deprecated use AnchorButtonProps */\nexport type IAnchorButtonProps = ButtonProps<HTMLAnchorElement>;\n// eslint-disable-next-line deprecation/deprecation\nexport type AnchorButtonProps = IAnchorButtonProps;\n\nexport interface IButtonState {\n    isActive: boolean;\n}\n\nexport abstract class AbstractButton<E extends HTMLButtonElement | HTMLAnchorElement> extends AbstractPureComponent2<\n    ButtonProps<E> &\n        (E extends HTMLButtonElement\n            ? React.ButtonHTMLAttributes<HTMLButtonElement>\n            : React.AnchorHTMLAttributes<HTMLAnchorElement>),\n    IButtonState\n> {\n    public state = {\n        isActive: false,\n    };\n\n    protected abstract buttonRef: HTMLElement | null;\n\n    private currentKeyDown?: number;\n\n    public abstract render(): JSX.Element;\n\n    protected getCommonButtonProps() {\n        const {\n            active = false,\n            alignText,\n            fill,\n            large,\n            loading = false,\n            outlined,\n            minimal,\n            small,\n            tabIndex,\n        } = this.props;\n        const disabled = this.props.disabled || loading;\n\n        const className = classNames(\n            Classes.BUTTON,\n            {\n                [Classes.ACTIVE]: !disabled && (active || this.state.isActive),\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.LOADING]: loading,\n                [Classes.MINIMAL]: minimal,\n                [Classes.OUTLINED]: outlined,\n                [Classes.SMALL]: small,\n            },\n            Classes.alignmentClass(alignText),\n            Classes.intentClass(this.props.intent),\n            this.props.className,\n        );\n\n        return {\n            className,\n            disabled,\n            onBlur: this.handleBlur,\n            onClick: disabled ? undefined : this.props.onClick,\n            onKeyDown: this.handleKeyDown,\n            onKeyUp: this.handleKeyUp,\n            tabIndex: disabled ? -1 : tabIndex,\n        };\n    }\n\n    // we're casting as `any` to get around a somewhat opaque safeInvoke error\n    // that \"Type argument candidate 'KeyboardEvent<T>' is not a valid type\n    // argument because it is not a supertype of candidate\n    // 'KeyboardEvent<HTMLElement>'.\"\n    protected handleKeyDown = (e: React.KeyboardEvent<any>) => {\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable deprecation/deprecation */\n        if (Keys.isKeyboardClick(e.which)) {\n            e.preventDefault();\n            if (e.which !== this.currentKeyDown) {\n                this.setState({ isActive: true });\n            }\n        }\n        this.currentKeyDown = e.which;\n        this.props.onKeyDown?.(e);\n    };\n\n    protected handleKeyUp = (e: React.KeyboardEvent<any>) => {\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable deprecation/deprecation */\n        if (Keys.isKeyboardClick(e.which)) {\n            this.setState({ isActive: false });\n            this.buttonRef?.click();\n        }\n        this.currentKeyDown = undefined;\n        this.props.onKeyUp?.(e);\n    };\n\n    protected handleBlur = (e: React.FocusEvent<any>) => {\n        if (this.state.isActive) {\n            this.setState({ isActive: false });\n        }\n        this.props.onBlur?.(e);\n    };\n\n    protected renderChildren(): React.ReactNode {\n        const { children, icon, loading, rightIcon, text } = this.props;\n        const maybeHasText = !Utils.isReactNodeEmpty(text) || !Utils.isReactNodeEmpty(children);\n        return [\n            loading && <Spinner key=\"loading\" className={Classes.BUTTON_SPINNER} size={IconSize.LARGE} />,\n            // The icon is purely decorative if text is provided\n            <Icon key=\"leftIcon\" icon={icon} aria-hidden={maybeHasText} tabIndex={maybeHasText ? -1 : undefined} />,\n            maybeHasText && (\n                <span key=\"text\" className={Classes.BUTTON_TEXT}>\n                    {text}\n                    {children}\n                </span>\n            ),\n            <Icon key=\"rightIcon\" icon={rightIcon} />,\n        ];\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}