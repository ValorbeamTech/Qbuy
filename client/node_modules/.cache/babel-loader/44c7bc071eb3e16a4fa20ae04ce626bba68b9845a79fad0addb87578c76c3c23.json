{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport * as React from \"react\";\nimport { isNodeEnv } from \"./utils\";\n/**\n * An abstract component that Blueprint components can extend\n * in order to add some common functionality like runtime props validation.\n *\n * @deprecated componentWillReceiveProps is deprecated in React 16.9; use AbstractComponent2 instead\n */\nvar AbstractComponent = /** @class */function (_super) {\n  __extends(AbstractComponent, _super);\n  function AbstractComponent(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    // Not bothering to remove entries when their timeouts finish because clearing invalid ID is a no-op\n    _this.timeoutIds = [];\n    /**\n     * Clear all known timeouts.\n     */\n    _this.clearTimeouts = function () {\n      if (_this.timeoutIds.length > 0) {\n        for (var _i = 0, _a = _this.timeoutIds; _i < _a.length; _i++) {\n          var timeoutId = _a[_i];\n          window.clearTimeout(timeoutId);\n        }\n        _this.timeoutIds = [];\n      }\n    };\n    if (!isNodeEnv(\"production\")) {\n      _this.validateProps(_this.props);\n    }\n    return _this;\n  }\n  AbstractComponent.prototype.componentWillReceiveProps = function (nextProps) {\n    if (!isNodeEnv(\"production\")) {\n      this.validateProps(nextProps);\n    }\n  };\n  AbstractComponent.prototype.componentWillUnmount = function () {\n    this.clearTimeouts();\n  };\n  /**\n   * Set a timeout and remember its ID.\n   * All stored timeouts will be cleared when component unmounts.\n   *\n   * @returns a \"cancel\" function that will clear timeout when invoked.\n   */\n  AbstractComponent.prototype.setTimeout = function (callback, timeout) {\n    var handle = window.setTimeout(callback, timeout);\n    this.timeoutIds.push(handle);\n    return function () {\n      return window.clearTimeout(handle);\n    };\n  };\n  /**\n   * Ensures that the props specified for a component are valid.\n   * Implementations should check that props are valid and usually throw an Error if they are not.\n   * Implementations should not duplicate checks that the type system already guarantees.\n   *\n   * This method should be used instead of React's\n   * [propTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) feature.\n   * Like propTypes, these runtime checks run only in development mode.\n   */\n  AbstractComponent.prototype.validateProps = function (_) {\n    // implement in subclass\n  };\n  return AbstractComponent;\n}(React.Component);\nexport { AbstractComponent };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,SAAS,QAAQ,SAAS;AAEnC;;;;;;AAMA;EAAsDC;EAOlD,2BAAYC,KAAQ,EAAEC,OAAa;IAAnC,YACIC,kBAAMF,KAAK,EAAEC,OAAO,CAAC;IAJzB;IACQE,gBAAU,GAAa,EAAE;IA+BjC;;;IAGOA,mBAAa,GAAG;MACnB,IAAIA,KAAI,CAACC,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QAC5B,KAAwB,UAAe,EAAfC,UAAI,CAACF,UAAU,EAAfG,cAAe,EAAfA,IAAe,EAAE;UAApC,IAAMC,SAAS;UAChBC,MAAM,CAACC,YAAY,CAACF,SAAS,CAAC;;QAElCL,KAAI,CAACC,UAAU,GAAG,EAAE;;IAE5B,CAAC;IArCG,IAAI,CAACN,SAAS,CAAC,YAAY,CAAC,EAAE;MAC1BK,KAAI,CAACQ,aAAa,CAACR,KAAI,CAACH,KAAK,CAAC;;;EAEtC;EAEOY,qDAAyB,GAAhC,UAAiCC,SAA6C;IAC1E,IAAI,CAACf,SAAS,CAAC,YAAY,CAAC,EAAE;MAC1B,IAAI,CAACa,aAAa,CAACE,SAAS,CAAC;;EAErC,CAAC;EAEMD,gDAAoB,GAA3B;IACI,IAAI,CAACE,aAAa,EAAE;EACxB,CAAC;EAED;;;;;;EAMOF,sCAAU,GAAjB,UAAkBG,QAAoB,EAAEC,OAAgB;IACpD,IAAMC,MAAM,GAAGR,MAAM,CAACS,UAAU,CAACH,QAAQ,EAAEC,OAAO,CAAC;IACnD,IAAI,CAACZ,UAAU,CAACe,IAAI,CAACF,MAAM,CAAC;IAC5B,OAAO;MAAM,aAAM,CAACP,YAAY,CAACO,MAAM,CAAC;IAA3B,CAA2B;EAC5C,CAAC;EAcD;;;;;;;;;EASUL,yCAAa,GAAvB,UAAwBQ,CAAqC;IACzD;EAAA,CACH;EACL,wBAAC;AAAD,CAAC,CA5DqDvB,KAAK,CAACwB,SAAS","names":["React","isNodeEnv","__extends","props","context","_super","_this","timeoutIds","length","_a","_i","timeoutId","window","clearTimeout","validateProps","AbstractComponent","nextProps","clearTimeouts","callback","timeout","handle","setTimeout","push","_","Component"],"sources":["/home/teramind/Documents/workspace/webguy/apps/ui/node_modules/@blueprintjs/core/src/common/abstractComponent.ts"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { isNodeEnv } from \"./utils\";\n\n/**\n * An abstract component that Blueprint components can extend\n * in order to add some common functionality like runtime props validation.\n *\n * @deprecated componentWillReceiveProps is deprecated in React 16.9; use AbstractComponent2 instead\n */\nexport abstract class AbstractComponent<P, S> extends React.Component<P, S> {\n    /** Component displayName should be `public static`. This property exists to prevent incorrect usage. */\n    protected displayName!: never;\n\n    // Not bothering to remove entries when their timeouts finish because clearing invalid ID is a no-op\n    private timeoutIds: number[] = [];\n\n    constructor(props: P, context?: any) {\n        super(props, context);\n        if (!isNodeEnv(\"production\")) {\n            this.validateProps(this.props);\n        }\n    }\n\n    public componentWillReceiveProps(nextProps: P & { children?: React.ReactNode }) {\n        if (!isNodeEnv(\"production\")) {\n            this.validateProps(nextProps);\n        }\n    }\n\n    public componentWillUnmount() {\n        this.clearTimeouts();\n    }\n\n    /**\n     * Set a timeout and remember its ID.\n     * All stored timeouts will be cleared when component unmounts.\n     *\n     * @returns a \"cancel\" function that will clear timeout when invoked.\n     */\n    public setTimeout(callback: () => void, timeout?: number) {\n        const handle = window.setTimeout(callback, timeout);\n        this.timeoutIds.push(handle);\n        return () => window.clearTimeout(handle);\n    }\n\n    /**\n     * Clear all known timeouts.\n     */\n    public clearTimeouts = () => {\n        if (this.timeoutIds.length > 0) {\n            for (const timeoutId of this.timeoutIds) {\n                window.clearTimeout(timeoutId);\n            }\n            this.timeoutIds = [];\n        }\n    };\n\n    /**\n     * Ensures that the props specified for a component are valid.\n     * Implementations should check that props are valid and usually throw an Error if they are not.\n     * Implementations should not duplicate checks that the type system already guarantees.\n     *\n     * This method should be used instead of React's\n     * [propTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) feature.\n     * Like propTypes, these runtime checks run only in development mode.\n     */\n    protected validateProps(_: P & { children?: React.ReactNode }) {\n        // implement in subclass\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}