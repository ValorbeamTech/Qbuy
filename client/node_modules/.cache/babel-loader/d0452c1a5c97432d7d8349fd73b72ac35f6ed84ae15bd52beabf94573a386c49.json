{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\n// HACKHACK: these components should go in separate files\n/* eslint-disable max-classes-per-file */\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { refHandler, setRef } from \"../../common/refs\";\nimport { AbstractButton } from \"./abstractButton\";\n/**\n * Button component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button\n */\nvar Button = /** @class */function (_super) {\n  __extends(Button, _super);\n  function Button() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    _this.buttonRef = null;\n    _this.handleRef = refHandler(_this, \"buttonRef\", _this.props.elementRef);\n    return _this;\n  }\n  Button.prototype.render = function () {\n    return React.createElement(\"button\", __assign({\n      type: \"button\",\n      ref: this.handleRef\n    }, removeNonHTMLProps(this.props), this.getCommonButtonProps()), this.renderChildren());\n  };\n  Button.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.elementRef !== this.props.elementRef) {\n      setRef(prevProps.elementRef, null);\n      this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n      setRef(this.props.elementRef, this.buttonRef);\n    }\n  };\n  Button.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Button\");\n  return Button;\n}(AbstractButton);\nexport { Button };\n/**\n * AnchorButton component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button\n */\nvar AnchorButton = /** @class */function (_super) {\n  __extends(AnchorButton, _super);\n  function AnchorButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    _this.buttonRef = null;\n    _this.handleRef = refHandler(_this, \"buttonRef\", _this.props.elementRef);\n    return _this;\n  }\n  AnchorButton.prototype.render = function () {\n    var _a = this.props,\n      href = _a.href,\n      _b = _a.tabIndex,\n      tabIndex = _b === void 0 ? 0 : _b;\n    var commonProps = this.getCommonButtonProps();\n    return React.createElement(\"a\", __assign({\n      role: \"button\",\n      ref: this.handleRef\n    }, removeNonHTMLProps(this.props), commonProps, {\n      href: commonProps.disabled ? undefined : href,\n      tabIndex: commonProps.disabled ? -1 : tabIndex\n    }), this.renderChildren());\n  };\n  AnchorButton.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.elementRef !== this.props.elementRef) {\n      setRef(prevProps.elementRef, null);\n      this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n      setRef(this.props.elementRef, this.buttonRef);\n    }\n  };\n  AnchorButton.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".AnchorButton\");\n  return AnchorButton;\n}(AbstractButton);\nexport { AnchorButton };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;AACA;AAEA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,kBAAkB,EAAEC,kBAAkB,QAAQ,oBAAoB;AAC3E,SAASC,UAAU,EAAEC,MAAM,QAAQ,mBAAmB;AACtD,SAASC,cAAc,QAA0E,kBAAkB;AAKnH;;;;;AAKA;EAA4BC;EAA5B;IAAA;IAGI;IACOC,eAAS,GAA6B,IAAI;IAEvCA,eAAS,GAAiCJ,UAAU,CAACI,KAAI,EAAE,WAAW,EAAEA,KAAI,CAACC,KAAK,CAACC,UAAU,CAAC;;EAsB5G;EApBWC,uBAAM,GAAb;IACI,OACIV;MACIW,IAAI,EAAC,QAAQ;MACbC,GAAG,EAAE,IAAI,CAACC;IAAS,GACfX,kBAAkB,CAAC,IAAI,CAACM,KAAK,CAAC,EAC9B,IAAI,CAACM,oBAAoB,EAAE,GAE9B,IAAI,CAACC,cAAc,EAAE,CACjB;EAEjB,CAAC;EAEML,mCAAkB,GAAzB,UAA0BM,SAAsB;IAC5C,IAAIA,SAAS,CAACP,UAAU,KAAK,IAAI,CAACD,KAAK,CAACC,UAAU,EAAE;MAChDL,MAAM,CAACY,SAAS,CAACP,UAAU,EAAE,IAAI,CAAC;MAClC,IAAI,CAACI,SAAS,GAAGV,UAAU,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAACK,KAAK,CAACC,UAAU,CAAC;MACrEL,MAAM,CAAC,IAAI,CAACI,KAAK,CAACC,UAAU,EAAE,IAAI,CAACQ,SAAS,CAAC;;EAErD,CAAC;EA1BaP,kBAAW,GAAG,UAAGT,kBAAkB,YAAS;EA2B9D,aAAC;CAAA,CA5B2BI,cAAc;SAA7BK,MAAM;AA8BnB;;;;;AAKA;EAAkCJ;EAAlC;IAAA;IAGI;IACOC,eAAS,GAA6B,IAAI;IAEvCA,eAAS,GAAiCJ,UAAU,CAACI,KAAI,EAAE,WAAW,EAAEA,KAAI,CAACC,KAAK,CAACC,UAAU,CAAC;;EA2B5G;EAzBWS,6BAAM,GAAb;IACU,SAAyB,IAAI,CAACV,KAAK;MAAjCW,IAAI;MAAEC,gBAAY;MAAZC,QAAQ,mBAAG,CAAC,KAAe;IACzC,IAAMC,WAAW,GAAG,IAAI,CAACR,oBAAoB,EAAE;IAE/C,OACId;MACIuB,IAAI,EAAC,QAAQ;MACbX,GAAG,EAAE,IAAI,CAACC;IAAS,GACfX,kBAAkB,CAAC,IAAI,CAACM,KAAK,CAAC,EAC9Bc,WAAW;MACfH,IAAI,EAAEG,WAAW,CAACE,QAAQ,GAAGC,SAAS,GAAGN,IAAI;MAC7CE,QAAQ,EAAEC,WAAW,CAACE,QAAQ,GAAG,CAAC,CAAC,GAAGH;IAAQ,IAE7C,IAAI,CAACN,cAAc,EAAE,CACtB;EAEZ,CAAC;EAEMG,yCAAkB,GAAzB,UAA0BF,SAA4B;IAClD,IAAIA,SAAS,CAACP,UAAU,KAAK,IAAI,CAACD,KAAK,CAACC,UAAU,EAAE;MAChDL,MAAM,CAACY,SAAS,CAACP,UAAU,EAAE,IAAI,CAAC;MAClC,IAAI,CAACI,SAAS,GAAGV,UAAU,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAACK,KAAK,CAACC,UAAU,CAAC;MACrEL,MAAM,CAAC,IAAI,CAACI,KAAK,CAACC,UAAU,EAAE,IAAI,CAACQ,SAAS,CAAC;;EAErD,CAAC;EA/BaC,wBAAW,GAAG,UAAGjB,kBAAkB,kBAAe;EAgCpE,mBAAC;CAAA,CAjCiCI,cAAc;SAAnCa,YAAY","names":["React","DISPLAYNAME_PREFIX","removeNonHTMLProps","refHandler","setRef","AbstractButton","__extends","_this","props","elementRef","Button","type","ref","handleRef","getCommonButtonProps","renderChildren","prevProps","buttonRef","AnchorButton","href","_b","tabIndex","commonProps","role","disabled","undefined"],"sources":["/home/teramind/Documents/workspace/webguy/apps/ui/node_modules/@blueprintjs/core/src/components/button/buttons.tsx"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// HACKHACK: these components should go in separate files\n/* eslint-disable max-classes-per-file */\n\nimport * as React from \"react\";\n\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { refHandler, setRef } from \"../../common/refs\";\nimport { AbstractButton, AnchorButtonProps, ButtonProps, IAnchorButtonProps, IButtonProps } from \"./abstractButton\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport { IAnchorButtonProps, IButtonProps, ButtonProps, AnchorButtonProps };\n\n/**\n * Button component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button\n */\nexport class Button extends AbstractButton<HTMLButtonElement> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Button`;\n\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    public buttonRef: HTMLButtonElement | null = null;\n\n    protected handleRef: React.Ref<HTMLButtonElement> = refHandler(this, \"buttonRef\", this.props.elementRef);\n\n    public render() {\n        return (\n            <button\n                type=\"button\"\n                ref={this.handleRef}\n                {...removeNonHTMLProps(this.props)}\n                {...this.getCommonButtonProps()}\n            >\n                {this.renderChildren()}\n            </button>\n        );\n    }\n\n    public componentDidUpdate(prevProps: ButtonProps) {\n        if (prevProps.elementRef !== this.props.elementRef) {\n            setRef(prevProps.elementRef, null);\n            this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n            setRef(this.props.elementRef, this.buttonRef);\n        }\n    }\n}\n\n/**\n * AnchorButton component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button\n */\nexport class AnchorButton extends AbstractButton<HTMLAnchorElement> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.AnchorButton`;\n\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    public buttonRef: HTMLAnchorElement | null = null;\n\n    protected handleRef: React.Ref<HTMLAnchorElement> = refHandler(this, \"buttonRef\", this.props.elementRef);\n\n    public render() {\n        const { href, tabIndex = 0 } = this.props;\n        const commonProps = this.getCommonButtonProps();\n\n        return (\n            <a\n                role=\"button\"\n                ref={this.handleRef}\n                {...removeNonHTMLProps(this.props)}\n                {...commonProps}\n                href={commonProps.disabled ? undefined : href}\n                tabIndex={commonProps.disabled ? -1 : tabIndex}\n            >\n                {this.renderChildren()}\n            </a>\n        );\n    }\n\n    public componentDidUpdate(prevProps: AnchorButtonProps) {\n        if (prevProps.elementRef !== this.props.elementRef) {\n            setRef(prevProps.elementRef, null);\n            this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n            setRef(this.props.elementRef, this.buttonRef);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}