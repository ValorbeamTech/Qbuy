{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from \"react\";\n/**\n * Returns true if `node` is null/undefined, false, empty string, or an array\n * composed of those. If `node` is an array, only one level of the array is\n * checked, for performance reasons.\n */\nexport function isReactNodeEmpty(node, skipArray) {\n  if (skipArray === void 0) {\n    skipArray = false;\n  }\n  return node == null || node === \"\" || node === false || !skipArray && Array.isArray(node) && (\n  // only recurse one level through arrays, for performance\n  node.length === 0 || node.every(function (n) {\n    return isReactNodeEmpty(n, true);\n  }));\n}\n/**\n * Returns true if children are a mappable children array\n *\n * @internal\n */\nexport function isReactChildrenElementOrElements(children) {\n  return !isReactNodeEmpty(children, true) && children !== true;\n}\n/**\n * Converts a React node to an element: non-empty string or number or\n * `React.Fragment` (React 16.3+) is wrapped in given tag name; empty strings\n * and booleans are discarded.\n */\nexport function ensureElement(child, tagName) {\n  if (tagName === void 0) {\n    tagName = \"span\";\n  }\n  if (child == null || typeof child === \"boolean\") {\n    return undefined;\n  } else if (typeof child === \"string\") {\n    // cull whitespace strings\n    return child.trim().length > 0 ? React.createElement(tagName, {}, child) : undefined;\n  } else if (typeof child === \"number\" || typeof child.type === \"symbol\" || Array.isArray(child)) {\n    // React.Fragment has a symbol type, ReactNodeArray extends from Array\n    return React.createElement(tagName, {}, child);\n  } else if (isReactElement(child)) {\n    return child;\n  } else {\n    // child is inferred as {}\n    return undefined;\n  }\n}\nfunction isReactElement(child) {\n  return typeof child === \"object\" && typeof child.type !== \"undefined\" && typeof child.props !== \"undefined\";\n}\n/**\n * @deprecated will be removed in v5.0\n */\nexport function getDisplayName(ComponentClass) {\n  return ComponentClass.displayName || ComponentClass.name || \"Unknown\";\n}\n/**\n * Returns true if the given JSX element matches the given component type.\n *\n * NOTE: This function only checks equality of `displayName` for performance and\n * to tolerate multiple minor versions of a component being included in one\n * application bundle.\n *\n * @param element JSX element in question\n * @param ComponentType desired component type of element\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isElementOfType(element, ComponentType) {\n  return element != null && element.type != null && element.type.displayName != null && element.type.displayName === ComponentType.displayName;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B;;;;;AAKA,OAAM,SAAUC,gBAAgB,CAACC,IAAsB,EAAEC,SAAiB;EAAjB;IAAAA,iBAAiB;EAAA;EACtE,OACID,IAAI,IAAI,IAAI,IACZA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,KAAK,IACb,CAACC,SAAS,IACPC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC;EACnB;EACCA,IAAI,CAACI,MAAM,KAAK,CAAC,IAAIJ,IAAI,CAACK,KAAK,CAAC,WAAC;IAAI,uBAAgB,CAACC,CAAC,EAAE,IAAI,CAAC;EAAzB,CAAyB,CAAC,CAAE;AAE9E;AAEA;;;;;AAKA,OAAM,SAAUC,gCAAgC,CAACC,QAAyB;EACtE,OAAO,CAACT,gBAAgB,CAACS,QAAQ,EAAE,IAAI,CAAC,IAAIA,QAAQ,KAAK,IAAI;AACjE;AAEA;;;;;AAKA,OAAM,SAAUC,aAAa,CAACC,KAAkC,EAAEC,OAA6C;EAA7C;IAAAA,gBAA6C;EAAA;EAC3G,IAAID,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;IAC7C,OAAOE,SAAS;GACnB,MAAM,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;IAClC;IACA,OAAOA,KAAK,CAACG,IAAI,EAAE,CAACT,MAAM,GAAG,CAAC,GAAGN,KAAK,CAACgB,aAAa,CAACH,OAAO,EAAE,EAAE,EAAED,KAAK,CAAC,GAAGE,SAAS;GACvF,MAAM,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAI,OAAQA,KAAa,CAACK,IAAI,KAAK,QAAQ,IAAIb,KAAK,CAACC,OAAO,CAACO,KAAK,CAAC,EAAE;IACrG;IACA,OAAOZ,KAAK,CAACgB,aAAa,CAACH,OAAO,EAAE,EAAE,EAAED,KAAK,CAAC;GACjD,MAAM,IAAIM,cAAc,CAACN,KAAK,CAAC,EAAE;IAC9B,OAAOA,KAAK;GACf,MAAM;IACH;IACA,OAAOE,SAAS;;AAExB;AAEA,SAASI,cAAc,CAAUN,KAAsB;EACnD,OACI,OAAOA,KAAK,KAAK,QAAQ,IACzB,OAAQA,KAAa,CAACK,IAAI,KAAK,WAAW,IAC1C,OAAQL,KAAa,CAACO,KAAK,KAAK,WAAW;AAEnD;AASA;;;AAGA,OAAM,SAAUC,cAAc,CAACC,cAA4C;EACvE,OAAQA,cAAsC,CAACC,WAAW,IAAKD,cAAyB,CAACE,IAAI,IAAI,SAAS;AAC9G;AAEA;;;;;;;;;;AAUA;AACA,OAAM,SAAUC,eAAe,CAC3BC,OAAY,EACZC,aAAqC;EAErC,OACID,OAAO,IAAI,IAAI,IACfA,OAAO,CAACR,IAAI,IAAI,IAAI,IACpBQ,OAAO,CAACR,IAAI,CAACK,WAAW,IAAI,IAAI,IAChCG,OAAO,CAACR,IAAI,CAACK,WAAW,KAAKI,aAAa,CAACJ,WAAW;AAE9D","names":["React","isReactNodeEmpty","node","skipArray","Array","isArray","length","every","n","isReactChildrenElementOrElements","children","ensureElement","child","tagName","undefined","trim","createElement","type","isReactElement","props","getDisplayName","ComponentClass","displayName","name","isElementOfType","element","ComponentType"],"sources":["/home/teramind/Documents/workspace/webguy/apps/ui/node_modules/@blueprintjs/core/src/common/utils/reactUtils.ts"],"sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\n/**\n * Returns true if `node` is null/undefined, false, empty string, or an array\n * composed of those. If `node` is an array, only one level of the array is\n * checked, for performance reasons.\n */\nexport function isReactNodeEmpty(node?: React.ReactNode, skipArray = false): boolean {\n    return (\n        node == null ||\n        node === \"\" ||\n        node === false ||\n        (!skipArray &&\n            Array.isArray(node) &&\n            // only recurse one level through arrays, for performance\n            (node.length === 0 || node.every(n => isReactNodeEmpty(n, true))))\n    );\n}\n\n/**\n * Returns true if children are a mappable children array\n *\n * @internal\n */\nexport function isReactChildrenElementOrElements(children: React.ReactNode): children is JSX.Element[] | JSX.Element {\n    return !isReactNodeEmpty(children, true) && children !== true;\n}\n\n/**\n * Converts a React node to an element: non-empty string or number or\n * `React.Fragment` (React 16.3+) is wrapped in given tag name; empty strings\n * and booleans are discarded.\n */\nexport function ensureElement(child: React.ReactNode | undefined, tagName: keyof JSX.IntrinsicElements = \"span\") {\n    if (child == null || typeof child === \"boolean\") {\n        return undefined;\n    } else if (typeof child === \"string\") {\n        // cull whitespace strings\n        return child.trim().length > 0 ? React.createElement(tagName, {}, child) : undefined;\n    } else if (typeof child === \"number\" || typeof (child as any).type === \"symbol\" || Array.isArray(child)) {\n        // React.Fragment has a symbol type, ReactNodeArray extends from Array\n        return React.createElement(tagName, {}, child);\n    } else if (isReactElement(child)) {\n        return child;\n    } else {\n        // child is inferred as {}\n        return undefined;\n    }\n}\n\nfunction isReactElement<T = any>(child: React.ReactNode): child is React.ReactElement<T> {\n    return (\n        typeof child === \"object\" &&\n        typeof (child as any).type !== \"undefined\" &&\n        typeof (child as any).props !== \"undefined\"\n    );\n}\n\n/**\n * Represents anything that has a `name` property such as Functions.\n */\ninterface INamed {\n    name?: string;\n}\n\n/**\n * @deprecated will be removed in v5.0\n */\nexport function getDisplayName(ComponentClass: React.ComponentType | INamed) {\n    return (ComponentClass as React.ComponentType).displayName || (ComponentClass as INamed).name || \"Unknown\";\n}\n\n/**\n * Returns true if the given JSX element matches the given component type.\n *\n * NOTE: This function only checks equality of `displayName` for performance and\n * to tolerate multiple minor versions of a component being included in one\n * application bundle.\n *\n * @param element JSX element in question\n * @param ComponentType desired component type of element\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isElementOfType<P = {}>(\n    element: any,\n    ComponentType: React.ComponentType<P>,\n): element is React.ReactElement<P> {\n    return (\n        element != null &&\n        element.type != null &&\n        element.type.displayName != null &&\n        element.type.displayName === ComponentType.displayName\n    );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}